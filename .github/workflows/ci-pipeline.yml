name: CI Pipeline

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Configurar .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restaurar dependências
        run: dotnet restore

      - name: Compilar todos os projetos
        run: dotnet build --configuration Debug --no-restore

  unit_tests:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Configurar .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restaurar dependências
        run: dotnet restore

      - name: Compilar testes unitários
        run: dotnet build --configuration Debug --no-restore

      - name: Executar testes unitários
        run: |
          dotnet test TechChallenge.Application.UnitTests/TechChallenge.Application.UnitTests.csproj --configuration Debug --no-build --verbosity normal
          dotnet test TechChallenge.Domain.UnitTests/TechChallenge.Domain.UnitTests.csproj --configuration Debug --no-build --verbosity normal
          dotnet test TechChallenge.Infrastructure.UnitTests/TechChallenge.Infrastructure.UnitTests.csproj --configuration Debug --no-build --verbosity normal

  integration_tests:
    runs-on: ubuntu-latest
    needs: build

    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          SA_PASSWORD: "NovaSenhaForte123"
          ACCEPT_EULA: "Y"
          MSSQL_PID: "Developer"
          MSSQL_MEMORY_LIMIT_MB: "2048"
        ports:
          - 1433:1433
        options: >-
          --memory="2g"
          --cpus="2"

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Configurar .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restaurar dependências
        run: dotnet restore

      - name: Compilar testes de integração
        run: dotnet build --configuration Debug --no-restore

      - name: Instalar SQLCMD (Ferramenta de Linha de Comando do SQL Server)
        run: |
          sudo apt-get update
          sudo apt-get install -y curl apt-transport-https
          curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
          sudo add-apt-repository "$(curl -s https://packages.microsoft.com/config/ubuntu/22.04/mssql-server-2022.list)"
          sudo apt-get update
          sudo apt-get install -y mssql-tools unixodbc-dev
          echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc
          source ~/.bashrc

      - name: Aguardar SQL Server inicializar manualmente
        run: |
          echo "Aguardando SQL Server iniciar..."
          sleep 30  # Aguarda 30s antes da primeira verificação
          for i in {1..15}; do
            sqlcmd -S sqlserver -U sa -P NovaSenhaForte123 -Q "SELECT 1"
            if [ $? -eq 0 ]; then
              echo "SQL Server está pronto!"
              exit 0
            fi
            echo "SQL Server ainda não está pronto... Tentativa $i de 15"
            sleep 5
          done
          echo "Erro: SQL Server não inicializou a tempo"
          exit 1

      - name: Criar banco de dados antes dos testes
        run: |
          sqlcmd -S sqlserver -U sa -P NovaSenhaForte123 -Q "CREATE DATABASE Contacts;"

      - name: Executar testes de integração
        env:
          ConnectionStrings__ConexaoPadrao: "Server=sqlserver,1433; Database=Contacts; User Id=sa; Password=NovaSenhaForte123; TrustServerCertificate=True"
        run: dotnet test TechChallenge.Application.IntegrationTests/TechChallenge.Application.IntegrationTests.csproj --configuration Debug --no-build --verbosity normal

  docker_build_push:
    runs-on: ubuntu-latest
    needs: [unit_tests, integration_tests]

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Autenticar no Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Construir e enviar imagens Docker
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/techchallenge-contatos:latest -f Contatos/Dockerfile .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/techchallenge-contatos:latest
          
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/techchallenge-consulta:latest -f Consulta/Dockerfile .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/techchallenge-consulta:latest
          
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/techchallenge-atualizacao:latest -f Atualizacao/Dockerfile .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/techchallenge-atualizacao:latest
          
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/techchallenge-exclusao:latest -f Exclusao/Dockerfile .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/techchallenge-exclusao:latest
          
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/techchallenge-persistencia:latest -f Persistencia/Dockerfile .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/techchallenge-persistencia:latest
