name: CI Pipeline

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Configurar .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restaurar dependências
        run: dotnet restore

      - name: Compilar todos os projetos
        run: dotnet build --configuration Debug --no-restore

  unit_tests:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Configurar .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restaurar dependências
        run: dotnet restore

      - name: Compilar testes
        run: dotnet build --configuration Debug

      - name: Executar testes unitários
        run: dotnet test --configuration Debug --verbosity detailed --logger "trx;LogFileName=TestResults.trx"

  integration_tests:
    runs-on: ubuntu-latest
    needs: build

    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          SA_PASSWORD: "NovaSenhaForte123"
          ACCEPT_EULA: "Y"
        ports:
          - 1433:1433
        options: >-
          --memory=4g
          --shm-size=1g

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Configurar .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restaurar dependências
        run: dotnet restore

      - name: Instalar SQLCMD
        run: |
          sudo apt-get update
          sudo apt-get install -y curl apt-transport-https
          curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
          sudo add-apt-repository "$(curl -s https://packages.microsoft.com/config/ubuntu/20.04/prod.list)"
          sudo apt-get update
          sudo apt-get install -y mssql-tools unixodbc-dev
          echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc
          source ~/.bashrc

      - name: Criar e validar appsettings.Test.json
        run: |
          echo '{"ConnectionStrings": {"ConexaoPadrao": "Server=sqlserver,1433; Database=Contacts; User Id=sa; Password=NovaSenhaForte123; TrustServerCertificate=True"}}' > appsettings.Test.json
          cat appsettings.Test.json

      - name: Esperar SQL Server estar pronto manualmente
        run: |
          echo "Aguardando SQL Server iniciar..."
          sleep 60
          for i in {1..30}; do
            /opt/mssql-tools/bin/sqlcmd -S sqlserver -U sa -P NovaSenhaForte123 -Q "SELECT 1" && echo "SQL Server pronto!" && exit 0
            echo "Aguardando SQL Server... Tentativa $i de 30"
            sleep 5
          done
          echo "Erro: SQL Server não inicializou a tempo"
          exit 1

      - name: Criar banco de dados
        run: |
          /opt/mssql-tools/bin/sqlcmd -S sqlserver -U sa -P NovaSenhaForte123 -Q "CREATE DATABASE Contacts;"

      - name: Compilar testes de integração
        run: dotnet build --configuration Debug

      - name: Executar testes de integração
        env:
          ConnectionStrings__ConexaoPadrao: "Server=sqlserver,1433; Database=Contacts; User Id=sa; Password=NovaSenhaForte123; TrustServerCertificate=True"
        run: dotnet test --configuration Debug --verbosity detailed --logger "trx;LogFileName=IntegrationTestResults.trx"

  docker_build_push:
    runs-on: ubuntu-latest
    needs: [unit_tests, integration_tests]

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Autenticar no Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Construir e enviar imagens Docker
        run: |
          for service in Contatos Consulta Atualizacao Exclusao Persistencia; do
            docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/techchallenge-${service,,}:latest -f $service/Dockerfile .
            docker push ${{ secrets.DOCKER_HUB_USERNAME }}/techchallenge-${service,,}:latest
          done
