name: CI Pipeline

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Configurar .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restaurar dependências
        run: dotnet restore

      - name: Compilar todos os projetos
        run: dotnet build --configuration Debug --no-restore

  unit_tests:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Configurar .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restaurar dependências
        run: dotnet restore

      - name: Compilar testes unitários
        run: dotnet build --configuration Debug --no-restore

      - name: Executar testes unitários
        run: |
          dotnet test TechChallenge.Application.UnitTests/TechChallenge.Application.UnitTests.csproj --configuration Debug --no-build --verbosity normal
          dotnet test TechChallenge.Domain.UnitTests/TechChallenge.Domain.UnitTests.csproj --configuration Debug --no-build --verbosity normal
          dotnet test TechChallenge.Infrastructure.UnitTests/TechChallenge.Infrastructure.UnitTests.csproj --configuration Debug --no-build --verbosity normal

  integration_tests:
    runs-on: ubuntu-latest
    needs: build

    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          SA_PASSWORD: "NovaSenhaForte123"
          ACCEPT_EULA: "Y"
          MSSQL_PID: "Developer"
          MSSQL_MEMORY_LIMIT_MB: "2048"
        ports:
          - 1433:1433
        options: >-
          --memory="2g"
          --cpus="2"

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Configurar .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restaurar dependências
        run: dotnet restore

      - name: Compilar testes de integração
        run: dotnet build --configuration Debug --no-restore

      - name: Testar conexão com SQL Server
        run: |
          for i in {1..10}; do
            nc -z -v -w5 sqlserver 1433 && echo "SQL Server está acessível" && exit 0
            echo "Tentativa $i de 10: SQL Server ainda não está acessível..."
            sleep 5
          done
          echo "Erro: SQL Server não respondeu a tempo"
          exit 1

      - name: Criar banco de dados antes dos testes
        run: |
          /opt/mssql-tools/bin/sqlcmd -S sqlserver -U sa -P NovaSenhaForte123 -Q "CREATE DATABASE Contacts;"

      - name: Obter IP do SQL Server
        run: |
          export SQL_IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -q --filter "ancestor=mcr.microsoft.com/mssql/server:2022-latest"))
          echo "SQL Server IP: $SQL_IP"
          echo "ConnectionStrings__ConexaoPadrao=Server=$SQL_IP,1433; Database=Contacts; User Id=sa; Password=NovaSenhaForte123; TrustServerCertificate=True" >> $GITHUB_ENV

      - name: Aplicar migrações do Entity Framework
        run: |
          dotnet ef database update --project TechChallenge.Infrastructure/TechChallenge.Infrastructure.csproj --context ContactDbContext --connection "$ConnectionStrings__ConexaoPadrao"

      - name: Executar testes de integração
        env:
          ConnectionStrings__ConexaoPadrao: "Server=$SQL_IP,1433; Database=Contacts; User Id=sa; Password=NovaSenhaForte123; TrustServerCertificate=True"
        run: dotnet test TechChallenge.Application.IntegrationTests/TechChallenge.Application.IntegrationTests.csproj --configuration Debug --no-build --verbosity normal
